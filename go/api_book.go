/*
 * BookApi API (beta ver.)
 *
 *  # Authentication simple no api access, no access token, just a toy project
 *
 * API version: 1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	// "encoding/json"
	"net/http"
	"strings"
	// "github.com/gorilla/mux"
)

// BookApiController binds http requests to an api service and writes the service results to the http response
type BookApiController struct {
	service      BookApiServicer
	errorHandler ErrorHandler
}

// BookApiOption for how the controller is set up.
type BookApiOption func(*BookApiController)

// WithBookApiErrorHandler inject ErrorHandler into controller
func WithBookApiErrorHandler(h ErrorHandler) BookApiOption {
	return func(c *BookApiController) {
		c.errorHandler = h
	}
}

// NewBookApiController creates a default api controller
func NewBookApiController(s BookApiServicer, opts ...BookApiOption) Router {
	controller := &BookApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BookApiController
func (c *BookApiController) Routes() Routes {
	return Routes{
		{
			"BookGetBook",
			strings.ToUpper("Get"),
			"/book",
			c.BookGetBook,
		},
	}
}

// BookGetBook - Get book details
func (c *BookApiController) BookGetBook(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	qParam := query.Get("q")
	filterParam := query.Get("filter")
	downloadParam := query.Get("download")
	startIndexParam, err := parseInt32Parameter(query.Get("startIndex"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	maxResultsParam, err := parseInt32Parameter(query.Get("maxResults"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	printTypeParam := query.Get("printType")
	orderByParam := query.Get("orderBy")
	result, err := c.service.BookGetBook(r.Context(), qParam, filterParam, downloadParam, startIndexParam, maxResultsParam, printTypeParam, orderByParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
